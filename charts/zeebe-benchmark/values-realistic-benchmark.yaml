# DEPRECATED worker configuration for the to be deployed worker application
worker:
  # Worker.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
  replicas: 0 # disabled per default as it is deprecated
  # Worker.benchmark.capacity defines how many jobs the worker should activate and work on
  capacity: 60

# Workers configuration for the to be deployed worker application
#        => New way to deploy workers <=
workers:
  benchmark: null

  #####
  # Request documents from customer
  customer-notification:
    # Workers.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
    replicas: 1
    # Workers.benchmark.capacity defines how many jobs the worker should activate and work on
    capacity: 30
    # Workers.benchmark.jobType defines the job type which should be used by the worker
    jobType: "customer_notification"
    # Workers.benchmark.payloadPath defines the path (inside the worker app) to the payload resource
    # that should be used to complete the corresponding jobs
    payloadPath: "bpmn/emptyPayload.json"
    # Workers.benchmark.payloadPath defines the delay of the worker before completing a job
    completionDelay: 300ms
    message:
      name: "dispute_process_receive_documents"
      correlationVariable: "correlationKey"
    # Workers.benchmark.logLevel defines the logging level for the benchmark worker
    logLevel: "INFO"
    # Workers.benchmark.resources defines the resources for the benchmark worker
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 500m
        memory: 256Mi

  #####
  # Store information and get customer info
  extract-data-from-document:
    # Workers.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
    replicas: 1
    # Workers.benchmark.capacity defines how many jobs the worker should activate and work on
    capacity: 30
    # Workers.benchmark.jobType defines the job type which should be used by the worker
    jobType: "extract_data_from_document"
    # Workers.benchmark.payloadPath defines the path (inside the worker app) to the payload resource
    # that should be used to complete the corresponding jobs
    payloadPath: "bpmn/emptyPayload.json"
    # Workers.benchmark.payloadPath defines the delay of the worker before completing a job
    completionDelay: 300ms
    # Workers.benchmark.logLevel defines the logging level for the benchmark worker
    logLevel: "INFO"
    # Workers.benchmark.resources defines the resources for the benchmark worker
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 500m
        memory: 256Mi

  ##### 
  # Request proof from vendor
  dispute-process-request-proof-from-vendor:
    # Workers.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
    replicas: 1
    # Workers.benchmark.capacity defines how many jobs the worker should activate and work on
    capacity: 60
    # Workers.benchmark.threads defines how many threads the worker can use to work on jobs
    threads: 30
    # Workers.benchmark.jobType defines the job type which should be used by the worker
    jobType: "dispute_process_request_proof_from_vendor"
    # Workers.benchmark.payloadPath defines the path (inside the worker app) to the payload resource
    # that should be used to complete the corresponding jobs
    payloadPath: "bpmn/emptyPayload.json"
    # Workers.benchmark.payloadPath defines the delay of the worker before completing a job
    completionDelay: 300ms
    # Workers.dispute-request-documents.message enables sending a message from a worker
    message:
      name: "dispute_process_refund_approved"
      correlationVariable : "correlationKey"
    # Workers.benchmark.logLevel defines the logging level for the benchmark worker
    logLevel: "INFO"
    # Workers.benchmark.resources defines the resources for the benchmark worker
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 500m
        memory: 256Mi

  ######
  # Get vendor info
  dispute-process-request-get-vendor-info:
    # Workers.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
    replicas: 1
    # Workers.benchmark.capacity defines how many jobs the worker should activate and work on
    capacity: 30
    # Workers.benchmark.jobType defines the job type which should be used by the worker
    jobType: "dispute_process_request_get_vendor_info"
    # Workers.benchmark.payloadPath defines the path (inside the worker app) to the payload resource
    # that should be used to complete the corresponding jobs
    payloadPath: "bpmn/emptyPayload.json"
    # Workers.benchmark.payloadPath defines the delay of the worker before completing a job
    completionDelay: 10ms
    # Workers.dispute-request-documents.message enables sending a message from a worker
    # Workers.benchmark.logLevel defines the logging level for the benchmark worker
    logLevel: "INFO"
    # Workers.benchmark.resources defines the resources for the benchmark worker
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 500m
        memory: 256Mi

  #####
  # Refund payment
  refunding:
    # Workers.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
    replicas: 1
    # Workers.benchmark.capacity defines how many jobs the worker should activate and work on
    capacity: 30
    # Workers.benchmark.threads defines how many threads the worker can use to work on jobs
    threads: 30
    # Workers.benchmark.jobType defines the job type which should be used by the worker
    jobType: "refunding"
    # Workers.benchmark.payloadPath defines the path (inside the worker app) to the payload resource
    # that should be used to complete the corresponding jobs
    payloadPath: "bpmn/emptyPayload.json"
    # Workers.benchmark.payloadPath defines the delay of the worker before completing a job
    completionDelay: 300ms
    # Workers.benchmark.logLevel defines the logging level for the benchmark worker
    logLevel: "INFO"
    # Workers.benchmark.resources defines the resources for the benchmark worker
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 500m
        memory: 256Mi

  #####
  # Inform customer about successful claim
  inform-about-successful-claim:
    # Workers.benchmark.replicas defines how many replicas of the benchmark worker should be deployed
    replicas: 1
    # Workers.benchmark.capacity defines how many jobs the worker should activate and work on
    capacity: 30
    # Workers.benchmark.jobType defines the job type which should be used by the worker
    jobType: "inform_about_successful_claim"
    # Workers.benchmark.payloadPath defines the path (inside the worker app) to the payload resource
    # that should be used to complete the corresponding jobs
    payloadPath: "bpmn/emptyPayload.json"
    # Workers.benchmark.payloadPath defines the delay of the worker before completing a job
    completionDelay: 300ms
    # Workers.benchmark.logLevel defines the logging level for the benchmark worker
    logLevel: "INFO"
    # Workers.benchmark.resources defines the resources for the benchmark worker
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 500m
        memory: 256Mi


#################################################################################################
#################################################################################################
#################################################################################################


# Starter configuration for the to be deployed starter application
starter:
  # Starter.replicas defines how many replicas of the application should be deployed
  replicas: 1
  # Starter.rate defines with which rate process instances should be created by the starter
  rate: 1
  # Starter.logLevel defines the logging level for the benchmark starter
  logLevel: "INFO"
  # Starter.processId defines the process ID, that should be used for creating new process instances
  processId: "bankDisputeHandling"
  # Starter.payloadPath defines the path (inside the starter app) to the payload resource
  # that should be used to create the corresponding process instance
  payloadPath: "bpmn/realistic/realisticPayload.json"
  # Starter.bpmnXmlPath defines the path (inside the starter app) to the main bpmn XML resource that should be deployed
  bpmnXmlPath: "bpmn/realistic/bankCustomerComplaintDisputeHandling.bpmn"
  # Starter.extraBpmnModels can be used to specify paths (inside the starter app) to extra resources that should be deployed
  extraResources: ["bpmn/realistic/refundingProcess.bpmn", "bpmn/realistic/determineFraudRatingConfidence.dmn"]
  # Starter.businessKey can be used to specify a businessKey variable, inside a unique identifier is stored for
  # each created process instance
  businessKey: "customerId"

## @section Orchestration Core Parameters
## @extra core configuration for the Orchestration Core.
camunda-platform:
  core:
    ## @param core.enabled if true, all related resources are deployed via the helm release
    enabled: true

    # Environment variables
    env:
      - name: K8S_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: K8S_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      # Enable JSON logging for google cloud stackdriver
      - name: ZEEBE_LOG_APPENDER
        value: Stackdriver
      - name: ZEEBE_LOG_STACKDRIVER_SERVICENAME
        value: zeebe
      - name: ZEEBE_LOG_STACKDRIVER_SERVICEVERSION
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: OPERATE_LOG_APPENDER
        value: Stackdriver
      - name: OPERATE_LOG_STACKDRIVER_SERVICENAME
        value: operate
      - name: OPERATE_LOG_STACKDRIVER_SERVICEVERSION
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: ATOMIX_LOG_LEVEL
        value: INFO
      - name: ZEEBE_LOG_LEVEL
        value: DEBUG
      - name: PYROSCOPE_SERVER_ADDRESS
        value: "http://pyroscope.pyroscope.svc.cluster.local:4040"
      - name: PYROSCOPE_APPLICATION_NAME
        value: "io.camunda.zeebe.broker"
      - name: PYROSCOPE_LOG_LEVEL
        value: "debug"
      - name: PYROSCOPE_FORMAT
        value: "jfr"
      - name: PYROSCOPE_PROFILER_EVENT
        value: "cpu"
      - name: PYROSCOPE_PROFILER_ALLOC
        value: "0"
      - name: PYROSCOPE_PROFILER_LOCK
        value: "0"
      - name: PYROSCOPE_LABELS
        value: "namespace=$(K8S_NAMESPACE), pod=$(K8S_NAME)"
      # To be able to load a separate/additional configuration
      # See https://github.com/camunda/camunda-platform-helm/issues/2197
      - name: SPRING_CONFIG_ADDITIONALLOCATION
        value: "/usr/local/camunda/config/benchmark-config.yaml"
      - name: JAVA_OPTS
        valueFrom:
          configMapKeyRef:
            name: zeebe-config
            key: java-opts
            optional: true
      # To run Operate and Tasklist add these to the value of this variable
      - name: SPRING_PROFILES_ACTIVE
        value: "auth,broker,operate"

    ## @param core.debug if true, extra info is printed.
    debug: false

    ## @extra core.image configuration to configure the image specifics
    image:
      ## @param core.image.repository defines which image repository to use
      repository: camunda/camunda
      ## @param core.image.tag can be set to overwrite the global tag, which should be used in that chart
      tag: SNAPSHOT


    ## @param core.logLevel defines the log level which is used
    logLevel: info

    ## @extra core.resources configuration to set request and limit configuration for the container https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits
    ## @extra core.resources.requests
    ## @param core.resources.requests.cpu
    ## @param core.resources.requests.memory
    ## @param core.resources.limits.cpu
    ## @param core.resources.limits.memory
    resources:
      limits:
        cpu: 3500m
        memory: 6Gi
      requests:
        cpu: 2000m
        memory: 5Gi

    nodeSelector:
      cloud.google.com/gke-nodepool: n2-standard-4

  elasticsearch:
    master:
      fullnameOverride: elastic
      nameOverride: elastic
      # Number of master-elegible replicas to deploy
      replicaCount: 3
      pdb:
        minAvailable: 2
      # Elasticsearch master-eligible node heap size.
      # Will be converted to -Xms3g
      heapSize: 3g
      # The resources configurations for elasticsearch containers
      resources:
        requests:
          cpu: 1
          memory: 3Gi
        limits:
          cpu: 2
          memory: 6Gi
      persistence:
        # Persistent Volume Storage Class
        storageClass: "ssd"
        # Persistent Volume Size
        size: 128Gi
        # Persistent Volume Access Modes
        accessModes: [ "ReadWriteOnce" ]